plugins {
	id 'com.diffplug.spotless' version "6.19.0"
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//Springboot Dependencies
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	//database
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	//json web token
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//spring-test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

spotless{
	java {
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
		googleJavaFormat('1.17.0').aosp().reflowLongStrings()
	}
	spotlessCheck.dependsOn(spotlessApply)
}

def classExcludedInTestCoverage = [
        '**/jwtsecurity/**'
]

jacocoTestCoverageVerification {
	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: classExcludedInTestCoverage)
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.99
			}
		}
	}
}

jacocoTestReport {
	afterEvaluate {
		getClassDirectories().setFrom(files(classDirectories.collect{
			fileTree(dir: it, exclude: classExcludedInTestCoverage)
		}))
	}
}
